/**
 * Copyright (C) 2018 Kalray SA.
 */

#ifndef MPPA_DL_TYPES_H
#define MPPA_DL_TYPES_H

#include "mppa_dl_debug.h"
#include "mppa_dl_trace.h"

#define MAX(a,b) (((a)>(b))?(a):(b))

#ifdef __KV3_64__
typedef Elf64_Dyn  ElfKVX_Dyn;
typedef Elf64_Word ElfKVX_Word;
typedef Elf64_Lword ElfKVX_Lword;
typedef Elf64_Rela ElfKVX_Rela;
typedef Elf64_Sym  ElfKVX_Sym;
typedef Elf64_Addr ElfKVX_Addr;
typedef Elf64_Half ElfKVX_Half;
typedef Elf64_Ehdr ElfKVX_Ehdr;
typedef Elf64_Shdr ElfKVX_Shdr;
typedef Elf64_Phdr ElfKVX_Phdr;

#define ELFKVX_R_TYPE(i) ELF64_R_TYPE((i))
#define ELFKVX_R_SYM(i)  ELF64_R_SYM((i))
#define ELFKVX_ST_BIND(I)  ELF64_ST_BIND(I)
#else
typedef Elf32_Dyn  ElfKVX_Dyn;
typedef Elf32_Word ElfKVX_Word;
typedef Elf32_Lword ElfKVX_Lword;
typedef Elf32_Rela ElfKVX_Rela;
typedef Elf32_Sym  ElfKVX_Sym;
typedef Elf32_Addr ElfKVX_Addr;
typedef Elf32_Half ElfKVX_Half;
typedef Elf32_Ehdr ElfKVX_Ehdr;
typedef Elf32_Shdr ElfKVX_Shdr;
typedef Elf32_Phdr ElfKVX_Phdr;

#define ELFKVX_R_TYPE(i) ELF32_R_TYPE((i))
#define ELFKVX_R_SYM(i)  ELF32_R_SYM((i))
#define ELFKVX_ST_BIND(I)  ELF32_ST_BIND(I)
#endif

extern __attribute__((weak)) ElfKVX_Dyn _DYNAMIC[];

#if defined(__KV3__)
/* This file is generated by MDS. */
#include "arch/mppa_dl_kv3.h"
#else
#error "Unsupported architecture"
#endif

/** One of the following two values must be included in the flags,
 * (see mppa_dl_load).
 *
 * - MPPA_DL_GLOBAL: the symbols defined by this library will be made available
 * for symbol resolution of subsequently loaded libraries.
 * - MPPA_DL_LOCAL: the symbols defined in this library are not made available
 * to resolve references in subsequently loaded libraries.
 */
enum MPPA_DL_LOAD_FLAGS {
	MPPA_DL_FLAG_MIN,
	MPPA_DL_GLOBAL,
	MPPA_DL_LOCAL,
	MPPA_DL_FLAG_MAX
};

typedef struct mppa_dl_handle {
	void       *addr;   /* ELF memory image address */
	ElfKVX_Half type;    /* ELF type (e_type from ElfKVX_Ehdr) */

	ElfKVX_Word *hash;   /* Symbol Hash Table address */
	ElfKVX_Word nbucket;
	ElfKVX_Word nchain;
	ElfKVX_Word *bucket; /* first bucket entry */
	ElfKVX_Word *chain;  /* first chain entry */

	ElfKVX_Rela *rela;   /* first DT_RELA relocation entry */
	size_t     relan;   /* number of DT_RELA relocations */

	void       *jmprel; /* first DT_JMPREL relocation entry (PLT) */
	ElfKVX_Word pltrel;  /* type of DT_JMPREL's relocations
			       (either DT_REL or DT_RELA) */
	size_t     pltreln; /* number of DT_JMPREL relocations */

	const char  *sht_strtab; /* address of SHT_STRTAB string table */
	ElfKVX_Sym  *sht_symtab_syms; /* address of the SHT_SYMTAB list */
	size_t      sht_symtab_nb_syms; /* number of symbols in SHT_SYMTAB */

	char       *strtab; /* address of the DT_STRTAB string table */
	size_t     strsz;   /* size in bytes of the DT_STRTAB string table */
	ElfKVX_Sym  *symtab; /* address of the DT_SYMTAB symbol table */
	char       *name;   /* library name, if available */

	int        availability; /* symbols availability */

	/* Debugging support. */
	struct mppa_dl_debug_map_s debug_map;

	/* Trace support */
	struct mppa_dl_trace_info trace_info;

	/* mppa_dl_handle is a node of a doubly linked list */
	struct mppa_dl_handle *parent;
	struct mppa_dl_handle *child;
} mppa_dl_handle_t;

#endif
