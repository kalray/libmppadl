##  -*- mode: makefile -*-

DESTDIR?=$(CURDIR)
O=$(DESTDIR)/output


board := $(BOARD)
arch := $(ARCH)

BIN2H:=$(abspath ../bin2h_v2.py)
GENERATED:=$(abspath $(DESTDIR)/generated)

K1_JTAG_RUNNER:=k1-jtag-runner
K1_REMOTE_RUNNER:= k1-remote-runner --nohost_exec

ifeq ($(CLUSTER_TYPE), ioddr)
K1_JTAG_RUNNER += --exec-file=IODDR0:
else
K1_JTAG_RUNNER += --exec-file=Cluster0:
endif

K1_CLUSTER_ARGS :=
K1_CLUSTER := k1-cluster  --no-trap

-include Makefile.arch.$(arch)

MAIN_LDFLAGS := $(SPEC_LDFLAGS) $(if $(findstring hypervisor,$(SPEC_LDFLAGS)),-lvbsp,) $(if $(findstring hypervisor,$(SPEC_LDFLAGS)),$(if $(findstring nodeos,$(SPEC_LDFLAGS)),,$(if $(findstring rtems,$(SPEC_LDFLAGS)),,-lutask)),) -Wl,-E -Wl,--dynamic-list-data -lmppadl -lsomppadl -lelf
MAIN_CFLAGS := -I$(GENERATED) $(SPEC_CFLAGS) -g -O0

MPPADL_INCLUDE_PATH ?= $(abspath $(CURDIR)/../../include/)

k1-cflags := -I $(MPPADL_INCLUDE_PATH) -Wall -Werror $(SPEC_CFLAGS) -save-temps=obj
k1-lflags := $(SPEC_LDFLAGS)


default : all

clean : clean-generated

clean-generated :
	rm -rf $(GENERATED)

define mdo_rules
$(GENERATED)/$(1)_hex.c : $(BIN_DIR)/$(1)_mdo
	mkdir -p $(GENERATED)
	$(BIN2H) $$< $$(notdir $$<) > $$@

$(GENERATED)/$(1)_hex.h : $(BIN_DIR)/$(1)_mdo
	mkdir -p $(GENERATED)
	$(BIN2H) $$< $$(notdir $$<) > $$@
endef

define test_rule
# only works on developer or explorer

test: $$(BIN_DIR)/main

ifneq (,$$(filter $(EXECUTION_PLATFORM)-$(BOARD),hw-csp_generic hw-explorer))
	../run_test.sh "$(GENERATED)/test.log" "$(GENERATED)" golden "$$<" $(K1_JTAG_RUNNER)$$<
else ifeq ($(EXECUTION_PLATFORM)-$(BOARD),hw-emb01)
	../run_test.sh "$(GENERATED)/test.log" "$(GENERATED)" golden "$$<" $(K1_REMOTE_RUNNER) --multibinary=$$< -- $(K1_JTAG_RUNNER)$$<
else ifneq (,$$(filter $(EXECUTION_PLATFORM)-$(BOARD),sim-csp_generic))
	../run_test.sh "$(GENERATED)/test.log" "$(GENERATED)" golden "$$<" $(K1_CLUSTER) $(K1_CLUSTER_ARGS) -- $$<
else
        $$(info Error, unknown board: $(EXECUTION_PLATFORM) on board $(BOARD))
	false
endif

endef
